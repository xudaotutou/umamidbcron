-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "postgres_log" (
	"log_time" timestamp(3) with time zone,
	"user_name" text,
	"database_name" text,
	"process_id" integer,
	"connection_from" text,
	"session_id" text NOT NULL,
	"session_line_num" bigint NOT NULL,
	"command_tag" text,
	"session_start_time" timestamp with time zone,
	"virtual_transaction_id" text,
	"transaction_id" bigint,
	"error_severity" text,
	"sql_state_code" text,
	"message" text,
	"detail" text,
	"hint" text,
	"internal_query" text,
	"internal_query_pos" integer,
	"context" text,
	"query" text,
	"query_pos" integer,
	"location" text,
	"application_name" text,
	"backend_type" text,
	"leader_pid" integer,
	"query_id" bigint,
	CONSTRAINT "postgres_log_check" CHECK (CHECK (false) NO INHERIT)
);
--> statement-breakpoint
CREATE VIEW "public"."pg_auth_mon" AS (SELECT COALESCE(pg_roles.rolname, pg_auth_mon.rolename_at_last_login_attempt) AS rolname, pg_roles.rolname IS NULL AS deleted, CASE WHEN pg_roles.rolname IS NULL THEN 0::oid ELSE pg_auth_mon.uid END AS uid, pg_auth_mon.successful_attempts, pg_auth_mon.last_successful_ts, pg_auth_mon.total_hba_conflicts, pg_auth_mon.other_auth_failures, pg_auth_mon.last_failed_ts FROM pg_auth_mon() pg_auth_mon(uid, successful_attempts, last_successful_ts, total_hba_conflicts, other_auth_failures, last_failed_ts, rolename_at_last_login_attempt) LEFT JOIN pg_roles ON pg_roles.oid = pg_auth_mon.uid);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_3" WITH (security_barrier = true) AS (SELECT postgres_log_3.log_time, postgres_log_3.user_name, postgres_log_3.database_name, postgres_log_3.process_id, postgres_log_3.connection_from, postgres_log_3.session_id, postgres_log_3.session_line_num, postgres_log_3.command_tag, postgres_log_3.session_start_time, postgres_log_3.virtual_transaction_id, postgres_log_3.transaction_id, postgres_log_3.error_severity, postgres_log_3.sql_state_code, postgres_log_3.message, postgres_log_3.detail, postgres_log_3.hint, postgres_log_3.internal_query, postgres_log_3.internal_query_pos, postgres_log_3.context, postgres_log_3.query, postgres_log_3.query_pos, postgres_log_3.location, postgres_log_3.application_name, postgres_log_3.backend_type, postgres_log_3.leader_pid, postgres_log_3.query_id FROM postgres_log_3 WHERE postgres_log_3.command_tag = 'authentication'::text AND postgres_log_3.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_4" WITH (security_barrier = true) AS (SELECT postgres_log_4.log_time, postgres_log_4.user_name, postgres_log_4.database_name, postgres_log_4.process_id, postgres_log_4.connection_from, postgres_log_4.session_id, postgres_log_4.session_line_num, postgres_log_4.command_tag, postgres_log_4.session_start_time, postgres_log_4.virtual_transaction_id, postgres_log_4.transaction_id, postgres_log_4.error_severity, postgres_log_4.sql_state_code, postgres_log_4.message, postgres_log_4.detail, postgres_log_4.hint, postgres_log_4.internal_query, postgres_log_4.internal_query_pos, postgres_log_4.context, postgres_log_4.query, postgres_log_4.query_pos, postgres_log_4.location, postgres_log_4.application_name, postgres_log_4.backend_type, postgres_log_4.leader_pid, postgres_log_4.query_id FROM postgres_log_4 WHERE postgres_log_4.command_tag = 'authentication'::text AND postgres_log_4.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_0" WITH (security_barrier = true) AS (SELECT postgres_log_0.log_time, postgres_log_0.user_name, postgres_log_0.database_name, postgres_log_0.process_id, postgres_log_0.connection_from, postgres_log_0.session_id, postgres_log_0.session_line_num, postgres_log_0.command_tag, postgres_log_0.session_start_time, postgres_log_0.virtual_transaction_id, postgres_log_0.transaction_id, postgres_log_0.error_severity, postgres_log_0.sql_state_code, postgres_log_0.message, postgres_log_0.detail, postgres_log_0.hint, postgres_log_0.internal_query, postgres_log_0.internal_query_pos, postgres_log_0.context, postgres_log_0.query, postgres_log_0.query_pos, postgres_log_0.location, postgres_log_0.application_name, postgres_log_0.backend_type, postgres_log_0.leader_pid, postgres_log_0.query_id FROM postgres_log_0 WHERE postgres_log_0.command_tag = 'authentication'::text AND postgres_log_0.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_1" WITH (security_barrier = true) AS (SELECT postgres_log_1.log_time, postgres_log_1.user_name, postgres_log_1.database_name, postgres_log_1.process_id, postgres_log_1.connection_from, postgres_log_1.session_id, postgres_log_1.session_line_num, postgres_log_1.command_tag, postgres_log_1.session_start_time, postgres_log_1.virtual_transaction_id, postgres_log_1.transaction_id, postgres_log_1.error_severity, postgres_log_1.sql_state_code, postgres_log_1.message, postgres_log_1.detail, postgres_log_1.hint, postgres_log_1.internal_query, postgres_log_1.internal_query_pos, postgres_log_1.context, postgres_log_1.query, postgres_log_1.query_pos, postgres_log_1.location, postgres_log_1.application_name, postgres_log_1.backend_type, postgres_log_1.leader_pid, postgres_log_1.query_id FROM postgres_log_1 WHERE postgres_log_1.command_tag = 'authentication'::text AND postgres_log_1.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_2" WITH (security_barrier = true) AS (SELECT postgres_log_2.log_time, postgres_log_2.user_name, postgres_log_2.database_name, postgres_log_2.process_id, postgres_log_2.connection_from, postgres_log_2.session_id, postgres_log_2.session_line_num, postgres_log_2.command_tag, postgres_log_2.session_start_time, postgres_log_2.virtual_transaction_id, postgres_log_2.transaction_id, postgres_log_2.error_severity, postgres_log_2.sql_state_code, postgres_log_2.message, postgres_log_2.detail, postgres_log_2.hint, postgres_log_2.internal_query, postgres_log_2.internal_query_pos, postgres_log_2.context, postgres_log_2.query, postgres_log_2.query_pos, postgres_log_2.location, postgres_log_2.application_name, postgres_log_2.backend_type, postgres_log_2.leader_pid, postgres_log_2.query_id FROM postgres_log_2 WHERE postgres_log_2.command_tag = 'authentication'::text AND postgres_log_2.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_5" WITH (security_barrier = true) AS (SELECT postgres_log_5.log_time, postgres_log_5.user_name, postgres_log_5.database_name, postgres_log_5.process_id, postgres_log_5.connection_from, postgres_log_5.session_id, postgres_log_5.session_line_num, postgres_log_5.command_tag, postgres_log_5.session_start_time, postgres_log_5.virtual_transaction_id, postgres_log_5.transaction_id, postgres_log_5.error_severity, postgres_log_5.sql_state_code, postgres_log_5.message, postgres_log_5.detail, postgres_log_5.hint, postgres_log_5.internal_query, postgres_log_5.internal_query_pos, postgres_log_5.context, postgres_log_5.query, postgres_log_5.query_pos, postgres_log_5.location, postgres_log_5.application_name, postgres_log_5.backend_type, postgres_log_5.leader_pid, postgres_log_5.query_id FROM postgres_log_5 WHERE postgres_log_5.command_tag = 'authentication'::text AND postgres_log_5.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_6" WITH (security_barrier = true) AS (SELECT postgres_log_6.log_time, postgres_log_6.user_name, postgres_log_6.database_name, postgres_log_6.process_id, postgres_log_6.connection_from, postgres_log_6.session_id, postgres_log_6.session_line_num, postgres_log_6.command_tag, postgres_log_6.session_start_time, postgres_log_6.virtual_transaction_id, postgres_log_6.transaction_id, postgres_log_6.error_severity, postgres_log_6.sql_state_code, postgres_log_6.message, postgres_log_6.detail, postgres_log_6.hint, postgres_log_6.internal_query, postgres_log_6.internal_query_pos, postgres_log_6.context, postgres_log_6.query, postgres_log_6.query_pos, postgres_log_6.location, postgres_log_6.application_name, postgres_log_6.backend_type, postgres_log_6.leader_pid, postgres_log_6.query_id FROM postgres_log_6 WHERE postgres_log_6.command_tag = 'authentication'::text AND postgres_log_6.error_severity = 'FATAL'::text);--> statement-breakpoint
CREATE VIEW "public"."failed_authentication_7" WITH (security_barrier = true) AS (SELECT postgres_log_7.log_time, postgres_log_7.user_name, postgres_log_7.database_name, postgres_log_7.process_id, postgres_log_7.connection_from, postgres_log_7.session_id, postgres_log_7.session_line_num, postgres_log_7.command_tag, postgres_log_7.session_start_time, postgres_log_7.virtual_transaction_id, postgres_log_7.transaction_id, postgres_log_7.error_severity, postgres_log_7.sql_state_code, postgres_log_7.message, postgres_log_7.detail, postgres_log_7.hint, postgres_log_7.internal_query, postgres_log_7.internal_query_pos, postgres_log_7.context, postgres_log_7.query, postgres_log_7.query_pos, postgres_log_7.location, postgres_log_7.application_name, postgres_log_7.backend_type, postgres_log_7.leader_pid, postgres_log_7.query_id FROM postgres_log_7 WHERE postgres_log_7.command_tag = 'authentication'::text AND postgres_log_7.error_severity = 'FATAL'::text);
*/